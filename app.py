import streamlit as st
import pandas as pd
import requests
import zipfile
import io
import re
import concurrent.futures

st.set_page_config(page_title="üì∏ Excel ‚Üí ZIP Image Downloader", layout="centered")

st.title("üì∏ ‡πÅ‡∏õ‡∏•‡∏á URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Excel ‡πÄ‡∏õ‡πá‡∏ô ZIP ‡πÑ‡∏ü‡∏•‡πå")
st.caption("üìå ‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠ 'Item' ‡πÅ‡∏•‡∏∞ 'URL'")

# üîµ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
st.image("example.png", caption="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£", use_container_width=True)

# üîµ ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Template
with open("Template.xlsx", "rb") as template_file:
    st.download_button(
        label="üë• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (Template)",
        data=template_file,
        file_name="Template.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

# ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel
uploaded_file = st.file_uploader("Drag and drop file here", type=["xlsx", "xls"])

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ failed_downloads ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
if 'failed_downloads' not in st.session_state:
    st.session_state.failed_downloads = []

def download_image(index_item_url):
    index, item, url = index_item_url
    if pd.isna(url):
        return None
    safe_item_name = re.sub(r'[\\/*?:"<>|]', "_", str(item).strip())

    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            return (index, safe_item_name, url, response.content)
    except Exception:
        return (index, safe_item_name, url, None)
    return (index, safe_item_name, url, None)

if uploaded_file:
    df = pd.read_excel(uploaded_file)

    if 'Item' not in df.columns or 'URL' not in df.columns:
        st.error("‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Item' ‡πÅ‡∏•‡∏∞ 'URL'")
    else:
        success_count = 0
        zip_buffer = io.BytesIO()

        if st.button("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"):
            st.session_state.failed_downloads = []

            total = len(df)
            progress_bar = st.progress(0, text="üìÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î...")

            with zipfile.ZipFile(zip_buffer, "w", zipfile.ZIP_DEFLATED) as zipf:
                with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
                    futures = [executor.submit(download_image, (idx + 2, row['Item'], row['URL'])) for idx, row in df.iterrows()]

                    for i, future in enumerate(concurrent.futures.as_completed(futures)):
                        result = future.result()
                        if result:
                            index, filename, url, content = result
                            if content:
                                zipf.writestr(f"{filename}.jpg", content)
                                success_count += 1
                            else:
                                st.session_state.failed_downloads.append({'Row': index, 'Item': filename, 'URL': url})

                        progress_bar.progress((i + 1) / total, text=f"üì∑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ({i + 1}/{total})")

            zip_buffer.seek(0)

            st.success(f"‚úÖ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô {success_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£!")
            st.download_button(
                label="üì¶ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î ZIP",
                data=zip_buffer,
                file_name="downloaded_images.zip",
                mime="application/zip"
            )

        if st.session_state.failed_downloads:
            st.warning(f"üöß Item ‡∏ó‡∏µ‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {len(st.session_state.failed_downloads)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:")
            failed_df_display = pd.DataFrame(st.session_state.failed_downloads)[['Row', 'Item', 'URL']]
            st.dataframe(failed_df_display, use_container_width=True, hide_index=True)

            failed_df_csv = pd.DataFrame(st.session_state.failed_downloads)[['Item', 'URL']]
            failed_csv = failed_df_csv.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üîß ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (CSV)",
                data=failed_csv,
                file_name="failed_downloads.csv",
                mime="text/csv"
            )
